/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ClaimsRegistryInterface extends ethers.utils.Interface {
  functions: {
    "computeSignableKey(address,bytes32)": FunctionFragment;
    "getClaim(address,bytes)": FunctionFragment;
    "recoverWithPrefix(bytes32,bytes)": FunctionFragment;
    "registry(bytes32)": FunctionFragment;
    "revokeClaim(bytes)": FunctionFragment;
    "setClaimWithSignature(address,address,bytes32,bytes)": FunctionFragment;
    "verifyClaim(address,address,bytes)": FunctionFragment;
    "verifyWithPrefix(bytes32,bytes,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "computeSignableKey",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaim",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverWithPrefix",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "registry", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "revokeClaim",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimWithSignature",
    values: [string, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyClaim",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyWithPrefix",
    values: [BytesLike, BytesLike, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "computeSignableKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverWithPrefix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyWithPrefix",
    data: BytesLike
  ): Result;

  events: {
    "ClaimRevoked(bytes)": EventFragment;
    "ClaimStored(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimStored"): EventFragment;
}

export class ClaimsRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ClaimsRegistryInterface;

  functions: {
    computeSignableKey(
      subject: string,
      claimHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "computeSignableKey(address,bytes32)"(
      subject: string,
      claimHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getClaim(
      attester: string,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getClaim(address,bytes)"(
      attester: string,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    recoverWithPrefix(
      hash: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "recoverWithPrefix(bytes32,bytes)"(
      hash: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    registry(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      subject: string;
      revoked: boolean;
      0: string;
      1: boolean;
    }>;

    "registry(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      subject: string;
      revoked: boolean;
      0: string;
      1: boolean;
    }>;

    revokeClaim(
      sig: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeClaim(bytes)"(
      sig: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setClaimWithSignature(
      subject: string,
      attester: string,
      claimHash: BytesLike,
      sig: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setClaimWithSignature(address,address,bytes32,bytes)"(
      subject: string,
      attester: string,
      claimHash: BytesLike,
      sig: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    verifyClaim(
      subject: string,
      attester: string,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "verifyClaim(address,address,bytes)"(
      subject: string,
      attester: string,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    verifyWithPrefix(
      hash: BytesLike,
      sig: BytesLike,
      signer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "verifyWithPrefix(bytes32,bytes,address)"(
      hash: BytesLike,
      sig: BytesLike,
      signer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;
  };

  computeSignableKey(
    subject: string,
    claimHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "computeSignableKey(address,bytes32)"(
    subject: string,
    claimHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getClaim(
    attester: string,
    sig: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getClaim(address,bytes)"(
    attester: string,
    sig: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  recoverWithPrefix(
    hash: BytesLike,
    sig: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "recoverWithPrefix(bytes32,bytes)"(
    hash: BytesLike,
    sig: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  registry(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    subject: string;
    revoked: boolean;
    0: string;
    1: boolean;
  }>;

  "registry(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    subject: string;
    revoked: boolean;
    0: string;
    1: boolean;
  }>;

  revokeClaim(
    sig: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeClaim(bytes)"(
    sig: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setClaimWithSignature(
    subject: string,
    attester: string,
    claimHash: BytesLike,
    sig: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setClaimWithSignature(address,address,bytes32,bytes)"(
    subject: string,
    attester: string,
    claimHash: BytesLike,
    sig: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  verifyClaim(
    subject: string,
    attester: string,
    sig: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verifyClaim(address,address,bytes)"(
    subject: string,
    attester: string,
    sig: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyWithPrefix(
    hash: BytesLike,
    sig: BytesLike,
    signer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verifyWithPrefix(bytes32,bytes,address)"(
    hash: BytesLike,
    sig: BytesLike,
    signer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    computeSignableKey(
      subject: string,
      claimHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "computeSignableKey(address,bytes32)"(
      subject: string,
      claimHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getClaim(
      attester: string,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getClaim(address,bytes)"(
      attester: string,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    recoverWithPrefix(
      hash: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "recoverWithPrefix(bytes32,bytes)"(
      hash: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    registry(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      subject: string;
      revoked: boolean;
      0: string;
      1: boolean;
    }>;

    "registry(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      subject: string;
      revoked: boolean;
      0: string;
      1: boolean;
    }>;

    revokeClaim(sig: BytesLike, overrides?: CallOverrides): Promise<void>;

    "revokeClaim(bytes)"(
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimWithSignature(
      subject: string,
      attester: string,
      claimHash: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setClaimWithSignature(address,address,bytes32,bytes)"(
      subject: string,
      attester: string,
      claimHash: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyClaim(
      subject: string,
      attester: string,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verifyClaim(address,address,bytes)"(
      subject: string,
      attester: string,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyWithPrefix(
      hash: BytesLike,
      sig: BytesLike,
      signer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verifyWithPrefix(bytes32,bytes,address)"(
      hash: BytesLike,
      sig: BytesLike,
      signer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    ClaimRevoked(sig: null): EventFilter;

    ClaimStored(sig: null): EventFilter;
  };

  estimateGas: {
    computeSignableKey(
      subject: string,
      claimHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeSignableKey(address,bytes32)"(
      subject: string,
      claimHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaim(
      attester: string,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getClaim(address,bytes)"(
      attester: string,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoverWithPrefix(
      hash: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "recoverWithPrefix(bytes32,bytes)"(
      hash: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registry(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "registry(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeClaim(sig: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "revokeClaim(bytes)"(
      sig: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setClaimWithSignature(
      subject: string,
      attester: string,
      claimHash: BytesLike,
      sig: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setClaimWithSignature(address,address,bytes32,bytes)"(
      subject: string,
      attester: string,
      claimHash: BytesLike,
      sig: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    verifyClaim(
      subject: string,
      attester: string,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verifyClaim(address,address,bytes)"(
      subject: string,
      attester: string,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyWithPrefix(
      hash: BytesLike,
      sig: BytesLike,
      signer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verifyWithPrefix(bytes32,bytes,address)"(
      hash: BytesLike,
      sig: BytesLike,
      signer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    computeSignableKey(
      subject: string,
      claimHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeSignableKey(address,bytes32)"(
      subject: string,
      claimHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaim(
      attester: string,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getClaim(address,bytes)"(
      attester: string,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoverWithPrefix(
      hash: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "recoverWithPrefix(bytes32,bytes)"(
      hash: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registry(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "registry(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeClaim(
      sig: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeClaim(bytes)"(
      sig: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setClaimWithSignature(
      subject: string,
      attester: string,
      claimHash: BytesLike,
      sig: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setClaimWithSignature(address,address,bytes32,bytes)"(
      subject: string,
      attester: string,
      claimHash: BytesLike,
      sig: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    verifyClaim(
      subject: string,
      attester: string,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifyClaim(address,address,bytes)"(
      subject: string,
      attester: string,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyWithPrefix(
      hash: BytesLike,
      sig: BytesLike,
      signer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifyWithPrefix(bytes32,bytes,address)"(
      hash: BytesLike,
      sig: BytesLike,
      signer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
